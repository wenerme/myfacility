package proto
import (
	"testing"
	"bytes"
	"github.com/stretchr/testify/assert"
)



func TestHandshakeResponse41Basic(t *testing.T) {
	//
	// Example
	// On MySQL 5.5.8 with CLIENT_PROTOCOL_41 CLIENT_PLUGIN_AUTH, CLIENT_SECURE_CONNECTION, and CLIENT_CONNECT_WITH_DB set, it may look like:
	//
	// 54 00 00 01 8d a6 0f 00    00 00 00 01 08 00 00 00    T...............
	// 00 00 00 00 00 00 00 00    00 00 00 00 00 00 00 00    ................
	// 00 00 00 00 70 61 6d 00    14 ab 09 ee f6 bc b1 32    ....pam........2
	// 3e 61 14 38 65 c0 99 1d    95 7d 75 d4 47 74 65 73    >a.8e....}u.Gtes
	// 74 00 6d 79 73 71 6c 5f    6e 61 74 69 76 65 5f 70    t.mysql_native_p
	// 61 73 73 77 6f 72 64 00                               assword.
	//
	data := []byte{
		0x54, 0x00, 0x00, 0x01, 0x8d, 0xa6, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x70, 0x61, 0x6d, 0x00, 0x14, 0xab, 0x09, 0xee, 0xf6, 0xbc, 0xb1, 0x32,
		0x3e, 0x61, 0x14, 0x38, 0x65, 0xc0, 0x99, 0x1d, 0x95, 0x7d, 0x75, 0xd4, 0x47, 0x74, 0x65, 0x73,
		0x74, 0x00, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
		0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x00,
	}
	c := CLIENT_PROTOCOL_41|CLIENT_PLUGIN_AUTH| CLIENT_SECURE_CONNECTION| CLIENT_CONNECT_WITH_DB
	p := &HandshakeResponse41{}
	assert := assert.New(t)
	assertValue(data, p, c, assert)
	//    t.Logf("%+v\n\n", p)

	assert.EqualValues("pam", p.Username)
	assert.EqualValues("test", p.Database)
	assert.EqualValues("mysql_native_password", p.AuthPluginName)
}

func TestHandshakeResponse41Send(t *testing.T) {

	data := []byte{
		0x2d, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0x0, 0x21, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x72, 0x6f, 0x6f, 0x74, 0x0, 0x0, 0x74, 0x65, 0x73, 0x74, 0x0, 0x0, 0x0,
	}
	c := CLIENT_PROTOCOL_41|CLIENT_PLUGIN_AUTH| CLIENT_SECURE_CONNECTION| CLIENT_CONNECT_WITH_DB
	p := &HandshakeResponse41{}
	assert := assert.New(t)
	assertValue(data, p, c, assert)
	//    t.Logf("%+v\n\n", p)

}
func TestHandshakeResponse41Attr(t *testing.T) {
	//
	// b2 00 00 01 85 a2 1e 00    00 00 00 40 08 00 00 00    ...........@....
	// 00 00 00 00 00 00 00 00    00 00 00 00 00 00 00 00    ................
	// 00 00 00 00 72 6f 6f 74    00 14 22 50 79 a2 12 d4    ....root.."Py...
	// e8 82 e5 b3 f4 1a 97 75    6b c8 be db 9f 80 6d 79    .......uk.....my
	// 73 71 6c 5f 6e 61 74 69    76 65 5f 70 61 73 73 77    sql_native_passw
	// 6f 72 64 00 61 03 5f 6f    73 09 64 65 62 69 61 6e    ord.a._os.debian
	// 36 2e 30 0c 5f 63 6c 69    65 6e 74 5f 6e 61 6d 65    6.0._client_name
	// 08 6c 69 62 6d 79 73 71    6c 04 5f 70 69 64 05 32    .libmysql._pid.2
	// 32 33 34 34 0f 5f 63 6c    69 65 6e 74 5f 76 65 72    2344._client_ver
	// 73 69 6f 6e 08 35 2e 36    2e 36 2d 6d 39 09 5f 70    sion.5.6.6-m9._p
	// 6c 61 74 66 6f 72 6d 06    78 38 36 5f 36 34 03 66    latform.x86_64.f
	// 6f 6f 03 62 61 72                                     oo.bar
	// Caution
	// Currently, multibyte character sets such as UCS2, UTF16 and UTF32 are not supported.
	//

	data := []byte{
		0xb2, 0x00, 0x00, 0x01, 0x85, 0xa2, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x72, 0x6f, 0x6f, 0x74, 0x00, 0x14, 0x22, 0x50, 0x79, 0xa2, 0x12, 0xd4,
		0xe8, 0x82, 0xe5, 0xb3, 0xf4, 0x1a, 0x97, 0x75, 0x6b, 0xc8, 0xbe, 0xdb, 0x9f, 0x80, 0x6d, 0x79,
		0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
		0x6f, 0x72, 0x64, 0x00, 0x61, 0x03, 0x5f, 0x6f, 0x73, 0x09, 0x64, 0x65, 0x62, 0x69, 0x61, 0x6e,
		0x36, 0x2e, 0x30, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
		0x08, 0x6c, 0x69, 0x62, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x04, 0x5f, 0x70, 0x69, 0x64, 0x05, 0x32,
		0x32, 0x33, 0x34, 0x34, 0x0f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
		0x73, 0x69, 0x6f, 0x6e, 0x08, 0x35, 0x2e, 0x36, 0x2e, 0x36, 0x2d, 0x6d, 0x39, 0x09, 0x5f, 0x70,
		0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x06, 0x78, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x03, 0x66,
		0x6f, 0x6f, 0x03, 0x62, 0x61, 0x72,
	}

	cap := CLIENT_PROTOCOL_41| CLIENT_SECURE_CONNECTION| CLIENT_CONNECT_WITH_DB|CLIENT_CONNECT_ATTRS
	p := &HandshakeResponse41{}
	assert := assert.New(t)
	c, _ := createCodec(data, p, cap)
	np := &HandshakeResponse41{}
	r := NewPackReader(bytes.NewReader(c.Packet.Payload))
	r.SetCapability(cap)
	np.Read(r)

	attr := map[string]string{"_pid":"22344",
		"_client_version":"5.6.6-m9",
		"_platform":"x86_64",
		"foo":"bar",
		"_os":"debian6.0",
		"_client_name":"libmysql",
	}
	assert.EqualValues(attr, p.Attributes)

	//    t.Logf("%+v\n\n", p)
	//    t.Logf("%+v\n\n", np)
}

/*
  5d 00 00 00 0a 35 2e 35    2e 35 2d 31 30 2e 30 2e    ]....5.5.5-10.0.
  31 35 2d 4d 61 72 69 61    44 42 2d 6c 6f 67 00 30    15-MariaDB-log.0
  00 00 00 66 6f 77 2b 6d    64 2e 56 00 ff f7 21 02    ...fow+md.V...!.
  00 3f a0 15 00 00 00 00    00 00 00 00 00 00 46 3b    .?............F;
  37 42 26 34 74 6c 44 4b    2e 41 00 6d 79 73 71 6c    7B&4tlDK.A.mysql
  5f 6e 61 74 69 76 65 5f    70 61 73 73 77 6f 72 64    _native_password
  00
  
  ac 00 00 01 0d a6 3f 20    00 00 00 01 21 00 00 00    ......? ....!...
  00 00 00 00 00 00 00 00    00 00 00 00 00 00 00 00    ................
  00 00 00 00 72 6f 6f 74    00 00 74 65 73 74 00 6d    ....root..test.m
  79 73 71 6c 5f 6e 61 74    69 76 65 5f 70 61 73 73    ysql_native_pass
  77 6f 72 64 00 6a 03 5f    6f 73 08 6f 73 78 31 30    word.j._os.osx10
  2e 31 30 0c 5f 63 6c 69    65 6e 74 5f 6e 61 6d 65    .10._client_name
  08 6c 69 62 6d 79 73 71    6c 04 5f 70 69 64 05 33    .libmysql._pid.3
  30 31 31 32 0f 5f 63 6c    69 65 6e 74 5f 76 65 72    0112._client_ver
  73 69 6f 6e 07 31 30 2e    30 2e 31 37 09 5f 70 6c    sion.10.0.17._pl
  61 74 66 6f 72 6d 06 78    38 36 5f 36 34 0c 70 72    atform.x86_64.pr
  6f 67 72 61 6d 5f 6e 61    6d 65 05 6d 79 73 71 6c    ogram_name.mysql


  
*/


func TestHandshakeResponse41General(t *testing.T) {
	//
	// ac 00 00 01 0d a6 3f 20    00 00 00 01 21 00 00 00    ......? ....!...
	// 00 00 00 00 00 00 00 00    00 00 00 00 00 00 00 00    ................
	// 00 00 00 00 72 6f 6f 74    00 00 74 65 73 74 00 6d    ....root..test.m
	// 79 73 71 6c 5f 6e 61 74    69 76 65 5f 70 61 73 73    ysql_native_pass
	// 77 6f 72 64 00 6a 03 5f    6f 73 08 6f 73 78 31 30    word.j._os.osx10
	// 2e 31 30 0c 5f 63 6c 69    65 6e 74 5f 6e 61 6d 65    .10._client_name
	// 08 6c 69 62 6d 79 73 71    6c 04 5f 70 69 64 05 33    .libmysql._pid.3
	// 30 31 31 32 0f 5f 63 6c    69 65 6e 74 5f 76 65 72    0112._client_ver
	// 73 69 6f 6e 07 31 30 2e    30 2e 31 37 09 5f 70 6c    sion.10.0.17._pl
	// 61 74 66 6f 72 6d 06 78    38 36 5f 36 34 0c 70 72    atform.x86_64.pr
	// 6f 67 72 61 6d 5f 6e 61    6d 65 05 6d 79 73 71 6c    ogram_name.mysql                            assword.
	//
	data := []byte{
		0xac, 0x00, 0x00, 0x01, 0x0d, 0xa6, 0x3f, 0x20, 0x00, 0x00, 0x00, 0x01, 0x21, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x72, 0x6f, 0x6f, 0x74, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x00, 0x6d,
		0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73,
		0x77, 0x6f, 0x72, 0x64, 0x00, 0x6a, 0x03, 0x5f, 0x6f, 0x73, 0x08, 0x6f, 0x73, 0x78, 0x31, 0x30,
		0x2e, 0x31, 0x30, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
		0x08, 0x6c, 0x69, 0x62, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x04, 0x5f, 0x70, 0x69, 0x64, 0x05, 0x33,
		0x30, 0x31, 0x31, 0x32, 0x0f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
		0x73, 0x69, 0x6f, 0x6e, 0x07, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x37, 0x09, 0x5f, 0x70, 0x6c,
		0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x06, 0x78, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x0c, 0x70, 0x72,
		0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	}
	_=data
	mydata := []byte{
		0x42, 0x0, 0x0, 0x0, 0xff, 0xf7, 0x3f, 0xa0, 0x0, 0x0, 0x0, 0x1, 0x21, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72,
		0x6f, 0x6f, 0x74, 0x0, 0x0, 0x74, 0x65, 0x73, 0x74, 0x0, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f,
		0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x0, 0x0,
	}
	c := CLIENT_PROTOCOL_41|CLIENT_PLUGIN_AUTH| CLIENT_SECURE_CONNECTION| CLIENT_CONNECT_WITH_DB|CLIENT_CONNECT_ATTRS
	p := &HandshakeResponse41{}
	assert := assert.New(t)
	assertValue(mydata, p, c, assert)
	//    t.Logf("%+v\n\n", p)
	assertValue(data, p, c, assert)
	//    t.Logf("%+v\n\n", p)
	//    t.Log(Capability(p.Capability))

}