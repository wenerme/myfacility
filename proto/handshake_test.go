package proto
import (
	"testing"
	"bytes"
	"github.com/stretchr/testify/assert"
)
/*
[]byte{0x5f, 0x0, 0x0, 0x10, 0xa, 0x35, 0x2e, 0x35, 0x2e, 0x33, 0x38, 0x2d, 0x30, 0x75, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x30, 0x2e, 0x31, 0x34, 0x2e, 0x30, 0x34, 0x2e, 0x31, 0x2d, 0x6c, 0x6f, 0x67, 0x0, 0x5, 0x0, 0x0, 0x0, 0x52, 0x4f, 0x77, 0x2c, 0x6e, 0x67, 0x3b, 0x30, 0x0, 0xff, 0xf7, 0x8, 0x2, 0x0, 0xf, 0x80, 0x15, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7d, 0x46, 0x26, 0x29, 0x3a, 0x28, 0x57, 0x60, 0x5a, 0x25, 0x47, 0x76, 0x0, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x0} (expected)
[]byte{0x5f, 0x0, 0x0, 0x10, 0xa, 0x35, 0x2e, 0x35, 0x2e, 0x33, 0x38, 0x2d, 0x30, 0x75, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x30, 0x2e, 0x31, 0x34, 0x2e, 0x30, 0x34, 0x2e, 0x31, 0x2d, 0x6c, 0x6f, 0x67, 0x0, 0x5, 0x0, 0x0, 0x0, 0x52, 0x4f, 0x77, 0x2c, 0x6e, 0x67, 0x3b, 0x30, 0x0, 0xff, 0xf7, 0x8, 0x2, 0x0, 0xf, 0x80, 0x15, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7d, 0x46, 0x26, 0x29, 0x3a, 0x28, 0x57, 0x60, 0x5a, 0x25, 0x47, 0x76, 0x0, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x0} (actual)
*/

func TestHandShake10(t *testing.T) {
	data := []byte{
		//length
		0x5f, 0x00, 0x00,
		//sequence id
		0x10,
		//handshake version 10
		0x0a,
		//mysql plain text version
		0x35, 0x2e, 0x35, 0x2e, 0x33, 0x38, 0x2d, 0x30, 0x75, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x30, 0x2e, 0x31,
		0x34, 0x2e, 0x30, 0x34, 0x2e, 0x31, 0x2d, 0x6c, 0x6f, 0x67, 0x00,
		//connection id
		0x05, 0x00, 0x00, 0x00,
		//auth-plugin-data-part-1 = ROw,ng;0
		0x52, 0x4f, 0x77, 0x2c, 0x6e, 0x67, 0x3b, 0x30,
		//filler
		0x00,
		//capability flags (lower 2 bytes)
		0xff, 0xf7,
		//charset
		0x08,
		//status flag
		0x02, 0x00,
		//capability flags (upper 2 bytes)
		0x0f, 0x80,
		//auth data length = 21
		0x15,
		//reserved 10 bytes
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		//auth-plugin-data-part-2 = }F&):(W`Z%Gv
		0x7d, 0x46, 0x26, 0x29, 0x3a, 0x28, 0x57, 0x60, 0x5a, 0x25, 0x47, 0x76, 0x00,
		//auth-plugin name = mysql_native_password
		0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73,
		0x77, 0x6f, 0x72, 0x64, 0x00,
	}
	r := NewPackReader(bytes.NewReader(data))
	r.SetCapability(0x800ff7ff)

	pk := &Packet{}
	pk.Read(r)
	p := &HandshakeV10{}
	pr := NewPackReader(bytes.NewReader(pk.Payload))
	pr.SetCapability(0x800ff7ff)
	p.Read(pr)

	assert := assert.New(t)
	assert.EqualValues(0x5f, pk.PayloadLength)
	assert.EqualValues(0x5f, len(pk.Payload))
	assert.EqualValues(0x5f, len(data)-4)
	assert.EqualValues(0x10, pk.SequenceId)


	assert.Equal(Int1(10), p.ProtocolVersion)
	assert.Equal(StrN("5.5.38-0ubuntu0.14.04.1-log"), p.ServerVersion)
	assert.EqualValues(5, p.ConnectionId)
	assert.EqualValues(Str("ROw,ng;0"), p.Challenge1)
	assert.Equal(Capability(0x800ff7ff), Capability(p.Capability))


	assert.EqualValues(2, p.Status)
	assert.EqualValues(21, p.AuthPluginDataLen)
	assert.EqualValues("}F&):(W`Z%Gv", p.Challenge2)
	assert.EqualValues("mysql_native_password", p.AuthPluginName)

	wb := bytes.NewBuffer(make([]byte, 0))
	c := NewCodec(nil, wb)
	c.SetCapability(0x800ff7ff)
	c.MustWritePack(p)
	c.Packet.SequenceId = pk.SequenceId
	c.MustWritePacket()
	c.MustFlushWrite()

	assertData(data, p, 0x800ff7ff, assert)


	//    t.Log(wb.Len())
	//    t.Logf("%#v\n",c.GetWritePacket())
	//    t.Logf("%#v\n",p)
	//    t.Log(c.GetWritePacket().PayloadLength,len(c.GetWritePacket().Payload),len(data))
	assert.EqualValues(data, wb.Bytes())
}

